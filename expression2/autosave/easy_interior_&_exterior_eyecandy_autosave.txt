@name Easy Interior & Exterior Eyecandy
@inputs [Base Gearstick SteeringWheel]:entity RPM Gear Fuel MaxFuel Curve Light
@outputs Kph Mileage
@persist GS_Angles:array Gear_L Gear_I [Gearstick_Ang Gearstick_Targ]:angle TickFix
@persist Dials_Enable
@persist SteeringWheel_Ang:angle Lights:array LightOutput RPM_Divisor
@trigger 

if(first() | dupefinished()){
    TickFix = 66 * tickInterval()
    
    Dials_Enable = 1
    
    #Gearstick
    if(->Gearstick){
        GS_Angles = array(
            ang(-12, 0, 25),
            ang(12, 0, -25),
            ang(12, 0, 25),
            ang(35, 0, -25),
            ang(35, 0, 25),
            ang(-35, 0, -25)
        )
        
        Gearstick_Ang = GS_Angles[Gear, angle]
        Gearstick_Targ = GS_Angles[Gear, angle]
        Gear_L = Gear, Gear_I = Gear
    }
    if(->SteeringWheel){
        SteeringWheel_Ang = ang(-45, 90, 0)
    }
    
    if(Dials_Enable){
        Dials_Scale = 0.5
        Dials_Pos = vec(20, 17.106, 26.2)
        Dials_Ang = ang(-45, 180, 0)
        Dials_Parent = Base
        RPM_Divisor = 318.6 / 1500
        
        holoCreate(1, Dials_Parent:toWorld(Dials_Pos + vec(0, 4.2, 0):rotate(Dials_Ang) * Dials_Scale), vec(Dials_Scale), Dials_Parent:toWorld(Dials_Ang), vec(150), "models/sprops/trans/misc/gauge_2.mdl")
        holoSkin(1, 1)
        holoParent(1, Dials_Parent)    
        
        holoCreate(2, Dials_Parent:toWorld(Dials_Pos + vec(0, -4.2, 0):rotate(Dials_Ang) * Dials_Scale), vec(Dials_Scale), Dials_Parent:toWorld(Dials_Ang), vec(150), "models/sprops/trans/misc/gauge_2.mdl")
        holoParent(2, Dials_Parent)    
        
        holoCreate(3, Dials_Parent:toWorld(Dials_Pos + vec(0, 0, 5.5):rotate(Dials_Ang) * Dials_Scale), vec(1, 0.6, 0.6) * Dials_Scale, Dials_Parent:toWorld(Dials_Ang), vec(150), "models/sprops/trans/misc/gauge_2.mdl")
        holoSkin(3, 2)
        holoParent(3, Dials_Parent)   
        
        #Gear gizmo
        if(->Gear & !(->Gearstick)){
            holoCreate(4, holoEntity(3):toWorld(vec(-0.7, 0, -0.8) * Dials_Scale), vec(0.25) * Dials_Scale, holoEntity(3):toWorld(ang(36 * Gear, 0, 0)), vec(255), "models/sprops/misc/numberwheel.mdl")
            holoParent(4, Dials_Parent)
        }
        
        #RPM dial
        if(->RPM){
            holoCreate(5, holoEntity(1):toWorld(vec(0.2, 0, 0) * Dials_Scale), vec(0.08, 0.08, 0.08) * Dials_Scale, holoEntity(1):toWorld(ang(90 + RPM * 0.036, 90, 90)), vec(50), "hq_cylinder")
            holoParent(5, Dials_Parent)    
            
            holoCreate(6, holoEntity(5):toWorld(vec(1, 0, 0.25) * Dials_Scale), vec(0.02, 0.05, 0.3) * Dials_Scale, holoEntity(5):toWorld(ang(0, 90, 90)), vec(255), "prism")
            holoDisableShading(6, 1)
            holoParent(6, 5)
        }
        
        #Speedo dial
        holoCreate(7, holoEntity(2):toWorld(vec(0.2, 0, 0) * Dials_Scale), vec(0.08, 0.08, 0.08) * Dials_Scale, holoEntity(2):toWorld(ang(90, 90, 90)), vec(50), "hq_cylinder")
        holoParent(7, Dials_Parent)    
        
        holoCreate(8, holoEntity(7):toWorld(vec(1, 0, 0.25) * Dials_Scale), vec(0.02, 0.05, 0.3) * Dials_Scale, holoEntity(7):toWorld(ang(0, 90, 90)), vec(255), "prism")
        holoDisableShading(8, 1)
        holoParent(8, 7)
        
        #Fuel dial
        if(->Fuel){
            holoCreate(9, holoEntity(3):toWorld(vec(0.6, 0, 0) * Dials_Scale), vec(0.05, 0.05, 0.015) * Dials_Scale, holoEntity(3):toWorld(ang(129 + (281 * (Fuel / MaxFuel)), 90, 90)), vec(50), "hq_cylinder")
            holoParent(9, Dials_Parent)    
            
            holoCreate(10, holoEntity(9):toWorld(vec(0.8, 0, 0) * Dials_Scale), vec(0.015, 0.02, 0.2) * Dials_Scale, holoEntity(9):toWorld(ang(0, 90, 90)), vec(255), "prism")
            holoDisableShading(10, 1)
            holoParent(10, 9)
        }
    }
    
    Lights = array(), LightOutput = 0
    foreach(_:number, E:entity = Base:getConnectedEntities()){
        if(E:type() != "gmod_wire_lamp"){ continue }
        Lights:pushEntity(E)
    }
}

if(~RPM){
    holoAng(5, holoEntity(1):toWorld(ang(90 + RPM * RPM_Divisor, 90, 90)))
}

if(~Fuel){
    holoAng(9, holoEntity(3):toWorld(ang(129 + (281 * (Fuel / MaxFuel)), 90, 90)))
}

if(~Curve){
    if(SteeringWheel:parent()){
        SteeringWheel:setLocalAng(SteeringWheel_Ang + ang(0, 0, Curve * 3))
    }
}

if(~Light & Light){
    LightOutput = !LightOutput
    foreach(_:number, E:entity = Lights){
        E:emitSound("items/flashlight1.wav", 60, random(95, 100), 1)
        local W = E:wirelink()
        W["On", number] = LightOutput
    }   
}

if(~Gear){
    if(->Gearstick){
        Gear_L = Gear_I   
        Gear_I = Gear
    
        Gearstick:emitSound("buttons/lever7.wav", 45, 100, 1)
        Gearstick:emitSound("acf_extra/vehiclefx/trans/default_shift.wav", 45, 100, 1)
            
        if(GS_Angles[Gear_L, angle]:pitch() == GS_Angles[Gear_I, angle]:pitch()){
            Gearstick_Targ = GS_Angles[Gear_I, angle]
        }else{
            Gearstick_Targ = ang(GS_Angles[Gear_L, angle]:pitch(), 0, 0)
            timer("Gearstick1", 5)  
        }
    }else{
        holoAng(4, holoEntity(3):toWorld(ang(36 * Gear, 0, 0)))
    }
}

if(clk("Gearstick1")){
    Gearstick_Targ = ang(GS_Angles[Gear_I, angle]:pitch(), 0, 0)
    timer("Gearstick2", 55) 
}

if(clk("Gearstick2")){
    Gearstick_Targ = GS_Angles[Gear_I, angle]
}

event tick(){
    #Gearstick movement
    if(->Gearstick){
        Gearstick_Ang += clamp(Gearstick_Targ - Gearstick_Ang, -10, 10) * TickFix
        if(changed(Gearstick_Ang)){
            Gearstick:setLocalAng(Gearstick_Ang)
        }
    }
    if(Dials_Enable){
        #Speedometer
        Kph = toUnit("km/h", abs(Base:velL():x()))
        if(changed(Kph)){
            holoAng(7, holoEntity(2):toWorld(ang(90 + min(Kph, 180) * 1.77, 90, 90)))
        }
    }
}
