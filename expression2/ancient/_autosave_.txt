@name Repellant
@persist [S E E1 E2 O]:entity Alpha A:array V

interval(20)

if(first()){

O = owner()
entity():propDraw(0)
entity():propNotSolid(1)
propSpawnUndo(0)

E = propSpawn("models/hunter/blocks/cube05x05x05.mdl",entity():pos()+vec(0,0,50),1)
E:propDraw(0)
E:propShadow(0)

#findExcludePlayerProps(O)
E["alpha",number] = 0

lightCreate(1)
lightPos(1, E:pos())

holoCreate(1, E:toWorld(vec()), vec(1), E:toWorld(ang(180,90,0)))
holoColor(1, vec(191,255,0))
holoMaterial(1, "models/debug/debugwhite")
holoDisableShading(1,1)
holoModel(1, "models/sprops/misc/alphanum/alphanum_arrow_a.mdl")
holoParent(1,E)
holoCreate(2, holoEntity(1):toWorld(vec()), vec(-1.05), holoEntity(1):toWorld(ang(180,0,0)))
holoColor(2, vec(80))
holoMaterial(2, "models/debug/debugwhite")
holoModel(2, "models/sprops/misc/alphanum/alphanum_arrow_a.mdl")
holoParent(2,1)
}


findInSphere(O:pos(),500)
findIncludeClass("rpg_missile")
findIncludeClass("prop_*")
findIncludeClass("snowball_thrown")
findIncludeClass("grenade_ar2")
findIncludeClass("npc_grenade_frag")
findIncludeClass("ms_hax_monitor")
findIncludeClass("pac_projectile")
findIncludeClass("fishing_mod_boat")
findExcludeClass("player")
A = findToArray()

foreach(I,S:entity=A){
SVEL=S:vel():length()
S["targ",entity]=(SVEL+$SVEL)/2 >=1000 ? S : noentity()

if(S["targ",entity]){
E:setAng((E:boxCenterW()-S["targ",entity]:massCenter()):toAngle())
E:setPos(O:nearestPoint(S["targ",entity]:massCenter())-(O:nearestPoint(S["targ",entity]:massCenter())-S["targ",entity]:pos()):normalized()*30)
lightToggle(1,1)
lightColor(1, vec(0.35686274509,0.60784313725,0)*E["alpha",number])
E["alpha",number] = 255}
}

E["alpha",number] = clamp(E["alpha",number]-5,0,255)

if(changed(E["alpha",number])){
lightToggle(1,E["alpha",number] ? 1 : 0)
E:propNotSolid(E["alpha",number] ? 0 : 1)
lightColor(1, vec(0.35686274509,0.60784313725,0)*E["alpha",number])
holoAlpha(1, E["alpha",number])
holoAlpha(2, E["alpha",number])
}

if(lightEntity(1):pos() != E:pos()){
lightPos(1, E:pos())}
