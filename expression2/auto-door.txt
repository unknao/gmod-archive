@name Auto-Door v2. Cursed edition
@inputs Doors:array
@trigger none
@strict

const Door_MoveTime = 0.5 #How long do the doors take to open/close.
const Door_AutoCloseTime = 3 #How long the door wants to stay open.
const Doors_InMotion = table()

foreach(_:number, E:entity = Doors){
    E["AD_StartAngle", angle] = E:angles()
    E["AD_Open", number] = 0
}
event playerUse(_:entity, E:entity){
    if(!E:isValid()){ exit() } #Might never trigger but you can't go wrong with always having one of these.
    if(E:owner() != owner()){ exit() } #If its not ours, bail.
    if(!E["AD_StartAngle", angle]){ exit() } #If it's not part of the system, bail.
    if(E["AD_MovementTTL", number] > curtime()){ exit() } #If it's in motion, bail.
    
    if(timerExists("AD_AutoClose_" + E:id())){
        stoptimer("AD_AutoClose_" + E:id())
    }
    
    E:emitSound("doors/door1_move.wav", 70, random(95, 105))
    E["AD_MovementTTL", number] = curtime() + Door_MoveTime
    Doors_InMotion:pushEntity(E)
}

event tick(){
    if(!Doors_InMotion:count()){ exit() }
    
    foreach(I:number, E:entity = Doors_InMotion){
        if(!E:isValid()){
            Doors_InMotion:remove(I)
            continue
        }
        
        let Lerp = remap(max(E["AD_MovementTTL", number] - curtime(), 0), 0, Door_MoveTime, 0, 1)
        Lerp = easeInCubic(Lerp)
        let SmoothMove = E["AD_Open", number] ? (Lerp * 90) : (90 - Lerp * 90)
        
        if(E["AD_Time", number] != curtime()){
            E:setAng(E["AD_StartAngle", angle] + ang(0, SmoothMove, 0))
            E["AD_Time", number] = curtime()
        }
        
        if(E["AD_MovementTTL", number] < curtime()){ #If its done moving, kick it out of the moving door list.
            E["AD_Open", number] = !E["AD_Open", number]
            
            if(E["AD_Open", number]){ #If open, initiate autoclose timer .
                (function(E:entity){ #Cursed lambda condom function
                    timer("AD_AutoClose_" + E:id(), Door_AutoCloseTime, 1, function(){
                        E["AD_MovementTTL", number] = curtime() + Door_MoveTime
                        Doors_InMotion:pushEntity(E) #Reuse the same logic we used for opening.
                        E:emitSound("doors/door1_move.wav", 70, random(95, 105))
                    })
                })(E)
            }
            Doors_InMotion:remove(I)
            E:emitSound("doors/door1_stop.wav", 70, random(95, 105))
        }
    }
}
